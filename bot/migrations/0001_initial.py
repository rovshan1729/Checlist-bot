# Generated by Django 5.0.6 on 2024-06-29 15:26

import ckeditor.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("common", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="TelegramBot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=30, null=True)),
                ("bot_token", models.CharField(max_length=255)),
                (
                    "bot_username",
                    models.CharField(blank=True, max_length=125, null=True),
                ),
            ],
            options={
                "verbose_name": "Telegram Bot",
                "verbose_name_plural": "Telegram Bots",
                "db_table": "telegram_bots",
            },
        ),
        migrations.CreateModel(
            name="RequiredGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "chat_id",
                    models.CharField(
                        help_text="Chat ID: -100000000 or Username: @username",
                        max_length=255,
                        verbose_name="Chat ID or Username",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255, null=True)),
                ("title_uz", models.CharField(blank=True, max_length=255, null=True)),
                ("title_ru", models.CharField(blank=True, max_length=255, null=True)),
                ("title_en", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "bot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.telegrambot",
                    ),
                ),
            ],
            options={
                "verbose_name": "Required Chats",
                "verbose_name_plural": "Required Chats",
                "db_table": "required_groups",
            },
        ),
        migrations.CreateModel(
            name="TelegramButton",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Button Name")),
                (
                    "title_uz",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Button Name"
                    ),
                ),
                (
                    "title_ru",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Button Name"
                    ),
                ),
                (
                    "title_en",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Button Name"
                    ),
                ),
                ("text", ckeditor.fields.RichTextField(verbose_name="Button Text")),
                (
                    "text_uz",
                    ckeditor.fields.RichTextField(
                        null=True, verbose_name="Button Text"
                    ),
                ),
                (
                    "text_ru",
                    ckeditor.fields.RichTextField(
                        null=True, verbose_name="Button Text"
                    ),
                ),
                (
                    "text_en",
                    ckeditor.fields.RichTextField(
                        null=True, verbose_name="Button Text"
                    ),
                ),
                (
                    "content",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="buttons",
                        verbose_name="Button Content",
                    ),
                ),
                (
                    "file_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="File ID"
                    ),
                ),
                (
                    "bot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.telegrambot",
                        verbose_name="Telegram Bot",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.telegrambutton",
                    ),
                ),
            ],
            options={
                "verbose_name": "Telegram Button",
                "verbose_name_plural": "Telegram Buttons",
                "db_table": "telegram_buttons",
            },
        ),
        migrations.CreateModel(
            name="TelegramProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                ("telegram_id", models.PositiveBigIntegerField()),
                ("first_name", models.CharField(max_length=255, null=True)),
                ("last_name", models.CharField(blank=True, max_length=255, null=True)),
                ("username", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("uz", "O'zbekcha"),
                            ("ru", "Русский"),
                            ("en", "English"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "full_name",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="Full Name"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        verbose_name="Phone Number",
                    ),
                ),
                (
                    "birth_day",
                    models.DateField(blank=True, null=True, verbose_name="Bith Day"),
                ),
                (
                    "class_room",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("5-sinf", "5-sinf"),
                            ("6-sinf", "6-sinf"),
                            ("7-sinf", "7-sinf"),
                            ("8-sinf", "8-sinf"),
                            ("9-sinf", "9-sinf"),
                            ("10-sinf", "10-sinf"),
                            ("11-sinf", "11-sinf"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="Class Room",
                    ),
                ),
                ("is_registered", models.BooleanField(default=False)),
                ("is_olimpic", models.BooleanField(default=False, editable=False)),
                (
                    "_user_data",
                    models.JSONField(
                        blank=True, editable=False, null=True, verbose_name="User Data"
                    ),
                ),
                (
                    "organization",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Maktab", "Maktab"),
                            ("Xususiy universitet", "Xususiy universitet"),
                            ("Davlat universitet", "Davlat universitet"),
                            ("O'quv markaz", "O'quv markaz"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="User Organization",
                    ),
                ),
                (
                    "bot",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.telegrambot",
                    ),
                ),
                (
                    "district",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.district",
                        verbose_name="District",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="region",
                        to="common.region",
                        verbose_name="Region",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.school",
                        verbose_name="School",
                    ),
                ),
            ],
            options={
                "verbose_name": "Telegram Profile",
                "verbose_name_plural": "Telegram Profiles",
                "db_table": "telegram_profiles",
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                (
                    "class_room",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("5-sinf", "5-sinf"),
                            ("6-sinf", "6-sinf"),
                            ("7-sinf", "7-sinf"),
                            ("8-sinf", "8-sinf"),
                            ("9-sinf", "9-sinf"),
                            ("10-sinf", "10-sinf"),
                            ("11-sinf", "11-sinf"),
                        ],
                        max_length=255,
                        null=True,
                        verbose_name="Class Room",
                    ),
                ),
                (
                    "is_all_users",
                    models.BooleanField(default=False, verbose_name="Is All Users"),
                ),
                (
                    "is_not_registered",
                    models.BooleanField(
                        default=False, verbose_name="Is Not Registered"
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=255, verbose_name="Notification Title"),
                ),
                (
                    "title_uz",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Notification Title"
                    ),
                ),
                (
                    "title_ru",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Notification Title"
                    ),
                ),
                (
                    "title_en",
                    models.CharField(
                        max_length=255, null=True, verbose_name="Notification Title"
                    ),
                ),
                (
                    "text",
                    ckeditor.fields.RichTextField(verbose_name="Notification Text"),
                ),
                (
                    "text_uz",
                    ckeditor.fields.RichTextField(
                        null=True, verbose_name="Notification Text"
                    ),
                ),
                (
                    "text_ru",
                    ckeditor.fields.RichTextField(
                        null=True, verbose_name="Notification Text"
                    ),
                ),
                (
                    "text_en",
                    ckeditor.fields.RichTextField(
                        null=True, verbose_name="Notification Text"
                    ),
                ),
                (
                    "file_content",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="notifications",
                        verbose_name="Notification File Content",
                    ),
                ),
                (
                    "sent_count",
                    models.PositiveIntegerField(
                        blank=True, default=0, null=True, verbose_name="Sent Count"
                    ),
                ),
                (
                    "fail_count",
                    models.PositiveIntegerField(
                        blank=True, default=0, null=True, verbose_name="Fail Count"
                    ),
                ),
                (
                    "district",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_district",
                        to="common.district",
                        verbose_name="District",
                    ),
                ),
                (
                    "region",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notification_region",
                        to="common.region",
                        verbose_name="Region",
                    ),
                ),
                (
                    "school",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="common.school",
                        verbose_name="School",
                    ),
                ),
                (
                    "bot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.telegrambot",
                        verbose_name="Telegram Bot",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        blank=True, to="bot.telegramprofile", verbose_name="Users"
                    ),
                ),
            ],
            options={
                "verbose_name": "Notification",
                "verbose_name_plural": "Notifications",
                "db_table": "notifications",
            },
        ),
        migrations.CreateModel(
            name="University",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Updated at"),
                ),
                ("title", models.CharField(max_length=255, verbose_name="Name")),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("Maktab", "Maktab"),
                            ("Xususiy universitet", "Xususiy universitet"),
                            ("Davlat universitet", "Davlat universitet"),
                            ("O'quv markaz", "O'quv markaz"),
                        ],
                        max_length=255,
                        verbose_name="Type",
                    ),
                ),
                (
                    "district",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="universities",
                        to="common.district",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="telegramprofile",
            name="university",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="bot.university",
                verbose_name="University",
            ),
        ),
        migrations.CreateModel(
            name="UserNotification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_sent", models.BooleanField(default=False, verbose_name="Is Sent")),
                (
                    "sent_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="Sent At"),
                ),
                (
                    "request_body",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Request Body"
                    ),
                ),
                (
                    "response_body",
                    models.JSONField(
                        blank=True, null=True, verbose_name="Response Body"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, null=True, verbose_name="Error Message"
                    ),
                ),
                (
                    "notification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.notification",
                        verbose_name="Notification",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="bot.telegramprofile",
                        verbose_name="User",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Notification",
                "verbose_name_plural": "User Notifications",
                "db_table": "user_notifications",
            },
        ),
    ]
